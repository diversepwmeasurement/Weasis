jobs:
  build:
    outputs:
      cleanversion: ${{ env.WEASIS_CLEAN_VERSION }}
      version: ${{ env.WEASIS_VERSION }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
    - continue-on-error: true
      name: Set up JDK for compilation
      uses: actions/setup-java@v3
      with:
        cache: maven
        distribution: temurin
        java-version: '21'
    - continue-on-error: true
      name: Build with Maven
      run: 'mvn -B clean install

        mvn -B -P compressXZ -f weasis-distributions clean package

        '
      shell: bash
    - continue-on-error: true
      name: Retrieve version
      run: 'FVERSION=$(awk -F''[<>]'' ''/<revision>/{print $3}'' weasis-parent/pom.xml)$(awk
        -F''[<>]'' ''/<changelist>/{print $3}'' weasis-parent/pom.xml)

        echo "WEASIS_VERSION=${FVERSION}" >> $GITHUB_ENV

        '
      shell: bash
    - continue-on-error: true
      name: Set compatible version
      run: 'CVERSION=$(echo $WEASIS_VERSION | sed -e ''s/"//g'' -e ''s/-.*//'')

        echo "WEASIS_CLEAN_VERSION=${CVERSION}" >> $GITHUB_ENV

        '
      shell: bash
    - continue-on-error: true
      name: Upload the weasis package for building the native distribution
      uses: actions/upload-artifact@v3
      with:
        name: weasis-native-${{ env.WEASIS_VERSION }}
        path: weasis-distributions/target/native-dist/weasis-native.zip
    - continue-on-error: true
      name: Upload the weasis web distribution
      uses: actions/upload-artifact@v3
      with:
        name: weasis-web-${{ env.WEASIS_VERSION }}
        path: weasis-distributions/target/web-dist/weasis.war
  jpackage:
    env:
      IDENTIFIER: org.weasis.launcher
      JDK_MODULES: java.base,java.compiler,java.datatransfer,java.net.http,java.desktop,java.logging,java.management,java.prefs,java.xml,jdk.localedata,jdk.charsets,jdk.crypto.ec,jdk.crypto.cryptoki,jdk.unsupported,jdk.jdwp.agent,java.sql
      NAME: Weasis
      WEASIS_INPUT: native-dist/weasis-native/bin-dist
      WEASIS_INPUT_BIN: native-dist/weasis-native/bin-dist/weasis
      WEASIS_OUTPUT: output-dist
    needs: build
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Set output version from build
      run: 'echo ${{needs.build.outputs.version}}

        echo ${{needs.build.outputs.cleanversion}}

        echo "WEASIS_VERSION=${{needs.build.outputs.version}}" >> $GITHUB_ENV

        echo "WEASIS_CLEAN_VERSION=${{needs.build.outputs.cleanversion}}" >> $GITHUB_ENV

        '
      shell: bash
    - continue-on-error: true
      name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: '21'
    - continue-on-error: true
      name: Download weasis-native
      uses: actions/download-artifact@v3
      with:
        name: weasis-native-${{ env.WEASIS_VERSION }}
        path: native-dist
    - continue-on-error: true
      name: Unzip the native package version
      run: 'unzip -o "native-dist/weasis-native.zip" -d "native-dist/weasis-native"

        '
      shell: bash
    - continue-on-error: true
      name: Remove binaries not related to the current architecture
      run: "# Remove pack jar for launcher\nrm -f ${{ env.WEASIS_INPUT_BIN }}/*.jar.pack.gz\n\
        # Remove the unrelated native packages\nfind ${{ env.WEASIS_INPUT_BIN }}/bundle/weasis-opencv-core-*\
        \ -type f ! -name *weasis-opencv-core-${{ matrix.wsystem }}-${{ matrix.warc\
        \ }}-* -exec rm -f {} \\;\n# Special case with 32-bit architecture, remove\
        \ 64-bit lib\nif [ \"${{ matrix.warc }}\" = \"x86\" ] ; then\n  rm -f ${{\
        \ env.WEASIS_INPUT_BIN }}/bundle/weasis-opencv-core-${{ matrix.wsystem }}-x86-64-*\n\
        fi\necho \"$(ls ${{ env.WEASIS_INPUT_BIN }}/bundle/)\"\n"
      shell: bash
    - continue-on-error: true
      id: cert
      if: matrix.wsystem == 'macosx'
      name: Import Developer Certificate
      uses: apple-actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.MACOS_CERTIFICATE_DEVELOPMENT }}
        p12-password: ${{ secrets.MACOS_CERTIFICATE_PWD }}
    - continue-on-error: true
      if: matrix.wsystem == 'macosx'
      name: Import Installer Certificate
      uses: apple-actions/import-codesign-certs@v2
      with:
        create-keychain: 'false'
        keychain-password: ${{ steps.cert.outputs.keychain-password }}
        p12-file-base64: ${{ secrets.MACOS_CERTIFICATE_INSTALLER }}
        p12-password: ${{ secrets.MACOS_CERTIFICATE_PWD }}
    - continue-on-error: true
      env:
        RES: native-dist/weasis-native/build/script/resources/${{ matrix.wsystem }}
      name: Build app binary with jpackage
      run: "machine=${{ matrix.wsystem }}\nif [ \"$machine\" = \"macosx\" ] ; then\n\
        \  declare -a customOptions=(\"--java-options\" \"-splash:\\$APPDIR/resources/images/about-round.png\"\
        \ \"--java-options\" \"-Dapple.laf.useScreenMenuBar=true\" \"--java-options\"\
        \ \"-Dapple.awt.application.appearance=NSAppearanceNameDarkAqua\")\n  declare\
        \ -a signArgs=(\"--mac-package-identifier\" \"${{ env.IDENTIFIER }}\" \"--mac-signing-keychain\"\
        \ \"$HOME/Library/Keychains/signing_temp.keychain-db\" \"--mac-sign\")\nelif\
        \ [ \"$machine\" = \"windows\" ] ; then\n  declare -a customOptions=(\"--java-options\"\
        \ \"-splash:\\$APPDIR\\resources\\images\\about-round.png\" )\n  declare -a\
        \ signArgs=()\nelse\n  declare -a customOptions=(\"--java-options\" \"-splash:\\\
        $APPDIR/resources/images/about-round.png\" )\n  declare -a signArgs=()\nfi\n\
        declare -a commonOptions=(\"--java-options\" \"-Dgosh.port=17179\" \\\n\"\
        --java-options\" \"-Djavax.accessibility.assistive_technologies=org.weasis.launcher.EmptyAccessibilityProvider\"\
        \ \\\n\"--java-options\" \"-Djavax.accessibility.screen_magnifier_present=false\"\
        \ \"--java-options\" \"--enable-preview\" \\\n\"--java-options\" \"--add-exports=java.base/sun.net.www.protocol.http=ALL-UNNAMED\"\
        \ \"--java-options\" \"--add-exports=java.base/sun.net.www.protocol.file=ALL-UNNAMED\"\
        \ \\\n\"--java-options\" \"--add-exports=java.base/sun.net.www.protocol.https=ALL-UNNAMED\"\
        \ \"--java-options\" \"--add-exports=java.base/sun.net.www.protocol.ftp=ALL-UNNAMED\"\
        \ \\\n\"--java-options\" \"--add-exports=java.base/sun.net.www.protocol.jar=ALL-UNNAMED\"\
        \ \"--java-options\" \"--add-exports=jdk.unsupported/sun.misc=ALL-UNNAMED\"\
        \ \\\n\"--java-options\" \"--add-opens=java.base/java.net=ALL-UNNAMED\" \"\
        --java-options\" \"--add-opens=java.base/java.lang=ALL-UNNAMED\" \\\n\"--java-options\"\
        \ \"--add-opens=java.base/java.security=ALL-UNNAMED\" \"--java-options\" \"\
        --add-opens=java.base/java.io=ALL-UNNAMED\" \\\n\"--java-options\" \"--add-opens=java.desktop/javax.imageio.stream=ALL-UNNAMED\"\
        \ \"--java-options\" \"--add-opens=java.desktop/javax.imageio=ALL-UNNAMED\"\
        \ \\\n\"--java-options\" \"--add-opens=java.desktop/com.sun.awt=ALL-UNNAMED\"\
        \ )\n\njpackage --type app-image --input \"${{ env.WEASIS_INPUT_BIN }}\" --dest\
        \ \"${{ env.WEASIS_OUTPUT }}\" --name \"${{ env.NAME }}\" \\\n--main-jar weasis-launcher.jar\
        \ --main-class org.weasis.launcher.AppLauncher --add-modules \"${{ env.JDK_MODULES\
        \ }}\" \\\n--resource-dir \"${{ env.RES }}\" --app-version \"${{ env.WEASIS_CLEAN_VERSION\
        \ }}\" --add-launcher \"Dicomizer=${{ env.RES }}/dicomizer-launcher.properties\"\
        \ \\\n\"${signArgs[@]}\" \"${customOptions[@]}\" \"${commonOptions[@]}\"\n\
        \nif [ \"$machine\" = \"macosx\" ] ; then\n    codesign --timestamp --entitlements\
        \ \"${{ env.RES }}/uri-launcher.entitlements\" --options runtime --force -vvv\
        \ --keychain \"$HOME/Library/Keychains/signing_temp.keychain-db\" --sign \"\
        ${{ secrets.MACOS__DEVELOPER_ID }}\" \"${{ env.RES }}/weasis-url-handler.app\"\
        \n    cp -Rf \"${{ env.RES }}/weasis-url-handler.app\" \"${{ env.WEASIS_OUTPUT\
        \ }}/${{ env.NAME }}.app/Contents/MacOS/\"\n    codesign --timestamp --entitlements\
        \ \"${{ env.RES }}/uri-launcher.entitlements\" --options runtime --force -vvv\
        \ --keychain \"$HOME/Library/Keychains/signing_temp.keychain-db\" --sign \"\
        ${{ secrets.MACOS__DEVELOPER_ID }}\" \"${{ env.WEASIS_OUTPUT }}/${{ env.NAME\
        \ }}.app\"\nfi\n\necho \"$(ls -la ${{ env.WEASIS_OUTPUT }})\"\n"
      shell: bash
    - continue-on-error: true
      env:
        COPYRIGHT: "\xA9 2009-2023 Weasis Team"
        FILE_ASSOC: native-dist/weasis-native/build/script/file-associations.properties
        RES: native-dist/weasis-native/build/script/resources/${{ matrix.wsystem }}
        VENDOR: Weasis Team
      name: Build package with jpackage
      run: "mkdir -p final-dist\nmachine=${{ matrix.wsystem }}\nARC_NAME=${{ matrix.warc\
        \ }}\nif [ \"$machine\" = \"windows\" ] ; then\n  [ \"$ARC_NAME\" = \"x86\"\
        \ ] && UPGRADE_UID=\"3aedc24e-48a8-4623-ab39-0c3c01c7383b\" || UPGRADE_UID=\"\
        3aedc24e-48a8-4623-ab39-0c3c01c7383a\"\n  jpackage --type \"msi\" --app-image\
        \ \"${{ env.WEASIS_OUTPUT }}/${{ env.NAME }}\" --dest \"${{ env.WEASIS_OUTPUT\
        \ }}\" --name \"${{ env.NAME }}\" --resource-dir \"${{ env.RES }}/msi/${ARC_NAME}\"\
        \ \\\n  --license-file \"${{ env.WEASIS_INPUT }}/Licence.txt\" --description\
        \ \"Weasis DICOM viewer\" --win-upgrade-uuid \"$UPGRADE_UID\" \\\n  --win-menu\
        \ --win-menu-group \"${{ env.NAME }}\" --copyright \"${{ env.COPYRIGHT }}\"\
        \ --app-version \"${{ env.WEASIS_CLEAN_VERSION }}\" \\\n  --vendor \"${{ env.VENDOR\
        \ }}\" --file-associations \"${{ env.FILE_ASSOC }}\" --verbose\n  cp ${{ env.WEASIS_OUTPUT\
        \ }}/*.msi final-dist/${{ env.NAME }}-${{ env.WEASIS_CLEAN_VERSION }}-${ARC_NAME}.msi\n\
        elif [ \"$machine\" = \"linux\" ] ; then\n  if [ \"${ARC_NAME}\" = \"x86\"\
        \ ] ; then\n    declare -a installerTypes=(\"deb\")\n  else\n    declare -a\
        \ installerTypes=(\"deb\" \"rpm\")\n  fi\n  for installerType in ${installerTypes[@]};\
        \ do\n    [ \"${installerType}\" = \"rpm\" ] && DEPENDENCIES=\"\" || DEPENDENCIES=\"\
        libstdc++6, libgcc1\"\n    jpackage --type \"${installerType}\" --app-image\
        \ \"${{ env.WEASIS_OUTPUT }}/${{ env.NAME }}\" --dest \"${{ env.WEASIS_OUTPUT\
        \ }}\" --name \"${{ env.NAME }}\" --resource-dir \"${{ env.RES }}\" \\\n \
        \   --license-file \"${{ env.WEASIS_INPUT }}/Licence.txt\" --description \"\
        Weasis DICOM viewer\" --vendor \"${{ env.VENDOR }}\" \\\n    --copyright \"\
        ${{ env.COPYRIGHT }}\" --app-version \"${{ env.WEASIS_CLEAN_VERSION }}\" --file-associations\
        \ \"${{ env.FILE_ASSOC }}\" \\\n    --linux-app-release \"1\" --linux-package-name\
        \ \"weasis\" --linux-deb-maintainer \"Nicolas Roduit\" --linux-rpm-license-type\
        \ \"EPL-2.0\" \\\n    --linux-menu-group \"Viewer;MedicalSoftware;Graphics;\"\
        \ --linux-app-category \"science\" --linux-package-deps \"${DEPENDENCIES}\"\
        \ --linux-shortcut --verbose\n    cp ${{ env.WEASIS_OUTPUT }}/*.${installerType}\
        \ final-dist\n  done\nelif [ \"$machine\" = \"macosx\" ] ; then\n  # Do not\
        \ set verbose for public build\n  jpackage --type \"pkg\" --app-image \"${{\
        \ env.WEASIS_OUTPUT }}/${{ env.NAME }}.app\" --dest \"${{ env.WEASIS_OUTPUT\
        \ }}\" --name \"${{ env.NAME }}\" --resource-dir \"${{ env.RES }}\" \\\n \
        \ --license-file \"${{ env.WEASIS_INPUT }}/Licence.txt\" --copyright \"${{\
        \ env.COPYRIGHT }}\" --app-version \"${{ env.WEASIS_CLEAN_VERSION }}\" --mac-package-identifier\
        \ \"${{ env.IDENTIFIER }}\" \\\n  --mac-signing-keychain \"$HOME/Library/Keychains/signing_temp.keychain-db\"\
        \ --mac-sign\n  cp ${{ env.WEASIS_OUTPUT }}/*.pkg final-dist/${{ env.NAME\
        \ }}-${{ env.WEASIS_CLEAN_VERSION }}-${ARC_NAME}.pkg\nfi\necho \"APP_ARTIFACT=weasis-${machine}-${ARC_NAME}-${{\
        \ env.WEASIS_CLEAN_VERSION }}\" >> $GITHUB_ENV\n"
      shell: bash
    - continue-on-error: true
      if: matrix.wsystem == 'macosx'
      name: Notarize Build
      run: "BUNDLE_PKG=\"final-dist/${{ env.NAME }}-${{ env.WEASIS_CLEAN_VERSION }}-${{\
        \ matrix.warc }}.pkg\"\n# create temporary files\nNOTARIZE_APP_LOG=$(mktemp\
        \ -t notarize-app)\nNOTARIZE_INFO_LOG=$(mktemp -t notarize-info)\n\n# delete\
        \ temporary files on exit\nfunction finish {\nrm \"$NOTARIZE_APP_LOG\" \"\
        $NOTARIZE_INFO_LOG\"\n}\ntrap finish EXIT\n\n\n# submit app for notarization\n\
        if xcrun altool --notarize-app --primary-bundle-id \"org.test.${{ env.NAME\
        \ }}\" --username \"${{ secrets.MACOS_NOTARIZATION_USER}}\" --password \"\
        ${{ secrets.MACOS_NOTARIZATION_PWD }}\" -f \"$BUNDLE_PKG\" > \"$NOTARIZE_APP_LOG\"\
        \ 2>&1; then\ncat \"$NOTARIZE_APP_LOG\"\nRequestUUID=$(awk -F ' = ' '/RequestUUID/\
        \ {print $2}' \"$NOTARIZE_APP_LOG\")\n\n# check status periodically\nwhile\
        \ sleep 60 && date; do\n # check notarization status\n if xcrun altool --notarization-info\
        \ \"$RequestUUID\" --username \"${{ secrets.MACOS_NOTARIZATION_USER}}\" --password\
        \ \"${{ secrets.MACOS_NOTARIZATION_PWD }}\" > \"$NOTARIZE_INFO_LOG\" 2>&1;\
        \ then\n   cat \"$NOTARIZE_INFO_LOG\"\n\n   # once notarization is complete,\
        \ run stapler and exit\n   if ! grep -q \"Status: in progress\" \"$NOTARIZE_INFO_LOG\"\
        ; then\n     xcrun stapler staple \"$BUNDLE_PKG\"\n     exit $?\n   fi\n else\n\
        \   cat \"$NOTARIZE_INFO_LOG\" 1>&2\n   exit 1\n fi\ndone\nelse\ncat \"$NOTARIZE_APP_LOG\"\
        \ 1>&2\nexit 1\nfi\n"
      shell: bash
    - continue-on-error: true
      name: Upload the installer
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.APP_ARTIFACT }}
        path: final-dist
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-latest
          platform: x64
          warc: x86-64
          wsystem: linux
        - os: macos-latest
          platform: x64
          warc: x86-64
          wsystem: macosx
        - os: macos-latest-xlarge
          platform: arm64
          warc: aarch64
          wsystem: macosx
        - os: windows-latest
          platform: x64
          warc: x86-64
          wsystem: windows
name: Build installers
on:
  repository_dispatch:
    types: trigger-ga___build-installer.yml
